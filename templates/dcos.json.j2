{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Launching the mGage {{ environ }} Mesosphere DCOS cluster",
  "Mappings": {
    "RegionToAmi": {
      "eu-west-1": {
        "stable": "ami-55d20b26"
      },
      "us-west-2": {
        "stable": "ami-00ebfc61"
      },
      "ap-southeast-1": {
        "stable": "ami-da67a0b9"
      },
      "eu-central-1": {
        "stable": "ami-fdd4c791"
      },
      "sa-east-1": {
        "stable": "ami-154af179"
      },
      "ap-southeast-2": {
        "stable": "ami-f35b0590"
      },
      "us-gov-west-1": {
        "stable": "ami-05bc0164"
      },
      "us-east-1": {
        "stable": "ami-37bdc15d"
      },
      "us-west-1": {
        "stable": "ami-27553a47"
      },
      "ap-northeast-1": {
        "stable": "ami-84e0c7ea"
      }
    }
  },
  "Resources": {
    "PublicSlaveSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Mesos Slaves Public",
        "VpcId": "{{ vpc_id }}",
        "Tags": [
          { "Key": "mGage:env",  "Value": "{{ environ }}" },
          { "Key": "mGage:unit",  "Value": "techops"  },
          { "Key": "mGage:product",  "Value": "Mesosphere"  },
          { "Key": "mGage:subproduct",  "Value": "DCOS"  },
          { "Key": "Name", "Value": "{{ environ }}-dcos-PublicSecurityGroup" }
        ]
      }
    },
    "PublicSlaveIngressTwo": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "ToPort": "5050",
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0",
        "FromPort": "23"
      }
    },
    "PublicSlaveLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "KeyName": "{{ key_name }}",
        "BlockDeviceMappings": [
          {
            "VirtualName": "ephemeral0",
            "DeviceName": "/dev/sdb"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "SlaveInstanceProfile"
        },
        "SecurityGroups": [
          {
            "Ref": "PublicSlaveSecurityGroup"
          }
        ],
        "InstanceType": "{{ public_slave_instance_type |default('m3.xlarge') }}",
        "UserData": {% include "roles/dcos/templates/public_user_data.json.j2" %},
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAmi",
            {
              "Ref": "AWS::Region"
            },
            "stable"
          ]
        },
        "AssociatePublicIpAddress": "true"
      }
    },
    "LbSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Mesos Master LB",
        "VpcId": "{{ vpc_id }}",
        "Tags": [
          { "Key": "mGage:env",  "Value": "{{ environ }}" },
          { "Key": "mGage:unit",  "Value": "techops"  },
          { "Key": "mGage:product",  "Value": "Mesosphere"  },
          { "Key": "mGage:subproduct",  "Value": "DCOS"  },
          { "Key": "Name", "Value": "{{ environ }}-dcos-LbSecurityGroup" }
        ]
      }
    },
    "AdminSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "ToPort": "22",
            "FromPort": "22",
            "CidrIp": "{{ admin_location }}"
          },
          {
            "IpProtocol": "tcp",
            "ToPort": "80",
            "FromPort": "80",
            "CidrIp": "{{ admin_location }}"
          },
          {
            "IpProtocol": "tcp",
            "ToPort": "443",
            "FromPort": "443",
            "CidrIp": "{{ admin_location }}"
          }
        ],
        "GroupDescription": "Enable admin access to servers",
        "VpcId": "{{ vpc_id }}",
        "Tags": [
          { "Key": "mGage:env",  "Value": "{{ environ }}" },
          { "Key": "mGage:unit",  "Value": "techops"  },
          { "Key": "mGage:product",  "Value": "Mesosphere"  },
          { "Key": "mGage:subproduct",  "Value": "DCOS"  },
          { "Key": "Name", "Value": "{{ environ }}-dcos-AdminSecurityGroup" }
        ]
      }
    },
    "SlaveToSlaveIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "GroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "ToPort": "65535",
        "IpProtocol": "-1",
        "FromPort": "0"
      }
    },
    "SlaveLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "KeyName": "{{ key_name }}",
        "BlockDeviceMappings": [
          {
            "VirtualName": "ephemeral0",
            "DeviceName": "/dev/sdb"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "SlaveInstanceProfile"
        },
        "SecurityGroups": [
          {
            "Ref": "SlaveSecurityGroup"
          }
        ],
        "InstanceType": "{{ slave_instance_type |default('m3.xlarge') }}",
        "UserData": {% include "roles/dcos/templates/slave_user_data.json.j2" %},
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAmi",
            {
              "Ref": "AWS::Region"
            },
            "stable"
          ]
        },
        "AssociatePublicIpAddress": "false"
      }
    },
    "SlaveToMasterLBIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "GroupId": {
          "Ref": "LbSecurityGroup"
        },
        "ToPort": "2181",
        "IpProtocol": "tcp",
        "FromPort": "2181"
      }
    },
    "MasterLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "KeyName": "{{ key_name }}",
        "BlockDeviceMappings": [
          {
            "VirtualName": "ephemeral0",
            "DeviceName": "/dev/sdb"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "MasterInstanceProfile"
        },
        "SecurityGroups": [
          {
            "Ref": "MasterSecurityGroup"
          },
          {
            "Ref": "AdminSecurityGroup"
          }
        ],
        "InstanceType": "{{ master_instance_type |default('m3.xlarge') }}",
        "UserData": {% include "roles/dcos/templates/master_user_data.json.j2" %},
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAmi",
            {
              "Ref": "AWS::Region"
            },
            "stable"
          ]
        },
        "AssociatePublicIpAddress": "true"
      }
    },
    "PublicSlaveToMasterIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "SourceSecurityGroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "ToPort": "65535",
        "IpProtocol": "-1",
        "FromPort": "0"
      }
    },
    "SlaveRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "{{ environ }}-DCOS-Slaves",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Ref": "AWS::StackId"
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Ref": "AWS::StackId"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ],
                  "Action": [
                    "cloudformation:*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": "*",
                  "Action": [
                    "ec2:CreateNetworkInterface",
                    "ec2:DeleteNetworkInterface",
                    "ec2:Describe*",
                    "ec2:ModifyNetworkInterfaceAttribute",
                    "ecr:GetAuthorizationToken",
                    "elasticfilesystem:*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:ecr:{{ region }}:{{ aws_account_number }}:repository/awscli",
                    "arn:aws:ecr:{{ region }}:{{ aws_account_number }}:repository/dcos-cli",
                    "arn:aws:ecr:{{ region }}:{{ aws_account_number }}:repository/{% if custom_ecr_repo is defined %}{{ custom_ecr_repo }}{% else %}jenkins{% endif %}"
                  ],
                  "Action": [
                    "ecr:GetRepositoryPolicy",
                    "ecr:DescribeRepositories",
                    "ecr:ListImages",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:PutImage",
                    "ecr:InitiateLayerUpload",
                    "ecr:UploadLayerPart",
                    "ecr:CompleteLayerUpload"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "SlaveInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "SlaveRole"
          }
        ],
        "Path": "/"
      }
    },
    "PublicSlaveIngressSix": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "ToPort": "65535",
        "IpProtocol": "udp",
        "CidrIp": "0.0.0.0/0",
        "FromPort": "5052"
      }
    },
    "InternalMasterLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "SecurityGroups": [
          {
            "Ref": "LbSecurityGroup"
          },
          {
            "Ref": "AdminSecurityGroup"
          },
          {
            "Ref": "SlaveSecurityGroup"
          },
          {
            "Ref": "PublicSlaveSecurityGroup"
          },
          {
            "Ref": "MasterSecurityGroup"
          }
        ],
        "HealthCheck": {
          "Interval": "30",
          "Timeout": "5",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "2",
          "Target": "HTTP:5050/health"
        },
        "Listeners": [
          {
            "InstanceProtocol": "HTTP",
            "LoadBalancerPort": "5050",
            "InstancePort": "5050",
            "Protocol": "HTTP"
          },
          {
            "InstanceProtocol": "TCP",
            "LoadBalancerPort": "2181",
            "InstancePort": "2181",
            "Protocol": "TCP"
          },
          {
            "InstanceProtocol": "HTTP",
            "LoadBalancerPort": "8181",
            "InstancePort": "8181",
            "Protocol": "HTTP"
          },
          {
            "InstanceProtocol": "HTTP",
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "Protocol": "HTTP"
          },
          {
            "InstanceProtocol": "HTTPS",
            "LoadBalancerPort": "443",
            "InstancePort": "443",
            "Protocol": "HTTPS",
            "SSLCertificateId": "{{ ssl_cert_arn }}"
          },
          {
            "InstanceProtocol": "HTTP",
            "LoadBalancerPort": "8080",
            "InstancePort": "8080",
            "Protocol": "HTTP"
          }
        ],
        "Subnets": [
          {% for subnet in public_subnet -%}
            "{{ subnet }}"
            {% if not loop.last %},{% endif -%}
          {% endfor -%}
        ],
        "Scheme": "internal"
      }
    },
    "SlaveToPublicSlaveIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "ToPort": "65535",
        "IpProtocol": "-1",
        "FromPort": "0"
      }
    },
    "PublicSlaveServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "{{ stack_creation_timeout }}",
          "Count": "{{ public_slave_instance_count |default(1) }}"
        }
      },
      "Properties": {
        "LoadBalancerNames": [
          {
            "Ref": "PublicSlaveLoadBalancer"
          }
        ],
        "Tags": [
          {
            "Key": "mGage:unit",
            "Value": "techops",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "mGage:product",
            "Value": "mesos-slave",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "mGage:env",
            "Value": "{{ environ }}",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "public-slave"
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          }
        ],
        "VPCZoneIdentifier": [
        {% for subnet in public_subnet -%}
          "{{ subnet }}"
          {% if not loop.last %},{% endif -%}
        {% endfor -%}
        ],
        "MaxSize": "{{ public_slave_max_instance_count |default(1) }}",
        "DesiredCapacity": "{{ public_slave_instance_count |default(1) }}",
        "LaunchConfigurationName": {
          "Ref": "PublicSlaveLaunchConfig"
        },
        "MinSize": "{{ public_slave_instance_count |default(1) }}"
      }
    },
    "PublicSlaveScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "PublicSlaveServerGroup" },
        "Cooldown" : "{{ publicslave_cooldown }}",
        "ScalingAdjustment" : "{{ publicslave_scaling_adjustment }}"
      }
    },
    "PublicSlaveCPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "EvaluationPeriods": "{{ publicslave_evaluation_period }}",
        "Statistic": "{{ publicslave_statistic_type }}",
        "Threshold": "{{ publicslave_threshold }}",
        "AlarmDescription": "{{ publicslave_alarm_description }}",
        "Period": "{{ publicslave_period }}",
        "AlarmActions": [ { "Ref": "PublicSlaveScaleUpPolicy" } ],
        "Namespace": "AWS/EC2",
        "Dimensions": [ {
           "Name": "AutoScalingGroupName",
           "Value": { "Ref": "PublicSlaveServerGroup" }
        } ],
        "ComparisonOperator": "{{ publicslave_comparison_operator }}",
        "MetricName": "{{ publicslave_metric_name }}"
      }
    },
    "MasterInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "MasterRole"
          }
        ],
        "Path": "/"
      }
    },
    "SlaveLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "SecurityGroups": [
          {
            "Ref": "SlaveSecurityGroup"
          }
        ],
        "HealthCheck": {
          "Interval": "30",
          "Timeout": "5",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "2",
          "Target": "HTTP:80/"
        },
        "Listeners": [
          {
            "Protocol": "HTTP",
            "InstancePort": "80",
            "LoadBalancerPort": "80",
            "InstanceProtocol": "HTTP"
          },
          {
            "Protocol": "TCP",
            "InstancePort": "443",
            "LoadBalancerPort": "443",
            "InstanceProtocol": "TCP",
            "SSLCertificateId": "{{ ssl_cert_arn }}"

          }
        ],
        "Subnets": [
        {% for subnet in private_subnet -%}
          "{{ subnet }}"
          {% if not loop.last %},{% endif -%}
        {% endfor -%}
        ]
        "Scheme": "internal"
      }
    },
    "SlaveServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "{{ stack_creation_timeout }}",
          "Count": "{{ slave_instance_count |default(5) }}"
        }
      },
      "Properties": {
        "LoadBalancerNames": [
          {
            "Ref": "SlaveLoadBalancer"
          }
        ],
        "VPCZoneIdentifier": [
          "{{ private_subnet|list|join(',') }}"
        ],
        "Tags": [
          {
            "Key": "mGage:unit",
            "Value": "techops",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "mGage:product",
            "Value": "mesos-slave",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "mGage:env",
            "Value": "{{ environ }}",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "slave"
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          }
        ],
        "MaxSize": "{{ slave_max_instance_count }}",
        "DesiredCapacity": "{{ slave_instance_count |default(5) }}",
        "LaunchConfigurationName": {
          "Ref": "SlaveLaunchConfig"
        },
        "MinSize": "{{ slave_instance_count |default(5) }}"
      }
    },
    "SlaveScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "SlaveServerGroup" },
        "Cooldown" : "{{ slave_cooldown }}",
        "ScalingAdjustment" : "{{ slave_scaling_adjustment }}"
      }
    },
    "SlaveCPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "EvaluationPeriods": "{{ slave_evaluation_period }}",
        "Statistic": "{{ slave_statistic_type }}",
        "Threshold": "{{ slave_threshold }}",
        "AlarmDescription": "{{ slave_alarm_description }}",
        "Period": "{{ slave_period }}",
        "AlarmActions": [ { "Ref": "SlaveScaleUpPolicy" } ],
        "Namespace": "AWS/EC2",
        "Dimensions": [ {
           "Name": "AutoScalingGroupName",
           "Value": { "Ref": "SlaveServerGroup" }
        } ],
        "ComparisonOperator": "{{ slave_comparison_operator }}",
        "MetricName": "{{ slave_metric_name }}"
      }
    },
    "PublicSlaveIngressFour": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "ToPort": "21",
        "IpProtocol": "udp",
        "CidrIp": "0.0.0.0/0",
        "FromPort": "0"
      }
    },
    "PublicSlaveLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "SecurityGroups": [
          {
            "Ref": "PublicSlaveSecurityGroup"
          }
        ],
        "HealthCheck": {
          "Interval": "30",
          "Timeout": "5",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "2",
          "Target": "HTTP:80/"
        },
        "Listeners": [
          {
            "Protocol": "HTTP",
            "InstancePort": "80",
            "LoadBalancerPort": "80",
            "InstanceProtocol": "HTTP"
          },
          {
            "Protocol": "TCP",
            "InstancePort": "443",
            "LoadBalancerPort": "443",
            "InstanceProtocol": "TCP"

          }
        ],
        "Subnets": [
        {% for subnet in public_subnet -%}
          "{{ subnet }}"
          {% if not loop.last %},{% endif -%}
        {% endfor -%}
        ]
      }
    },
    "MasterSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "SecurityGroupIngress": [
          {
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "IpProtocol": "tcp",
            "ToPort": "5050",
            "FromPort": "5050"
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "IpProtocol": "tcp",
            "ToPort": "80",
            "FromPort": "80"
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "IpProtocol": "tcp",
            "ToPort": "8080",
            "FromPort": "8080"
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "IpProtocol": "tcp",
            "ToPort": "8181",
            "FromPort": "8181"
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "IpProtocol": "tcp",
            "ToPort": "2181",
            "FromPort": "2181"
          }
        ],
        "GroupDescription": "Mesos Masters",
        "VpcId": "{{ vpc_id }}",
        "Tags": [
          { "Key": "mGage:env",  "Value": "{{ environ }}" },
          { "Key": "mGage:unit",  "Value": "techops"  },
          { "Key": "mGage:product",  "Value": "Mesosphere"  },
          { "Key": "mGage:subproduct",  "Value": "DCOS"  },
          { "Key": "Name", "Value": "{{ environ }}-dcos-MasterSecurityGroup" }
        ]
      }
    },
    "PublicSlaveToPublicSlaveIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "SourceSecurityGroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "ToPort": "65535",
        "IpProtocol": "-1",
        "FromPort": "0"
      }
    },
    "PublicSlaveIngressThree": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "ToPort": "65535",
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0",
        "FromPort": "5052"
      }
    },
    "PublicSlaveIngressFive": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "ToPort": "5050",
        "IpProtocol": "udp",
        "CidrIp": "0.0.0.0/0",
        "FromPort": "23"
      }
    },
    "MasterServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "{{ stack_creation_timeout }}",
          "Count": "{{ master_instance_count | default(3) }}"
        }
      },
      "Properties": {
        "LoadBalancerNames": [
          {
            "Ref": "InternalMasterLoadBalancer"
          }
        ],
        "Tags": [
          {
            "Key": "mGage:unit",
            "Value": "techops",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "mGage:product",
            "Value": "mesos-master",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "mGage:env",
            "Value": "{{ environ }}",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "master"
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          }
        ],
        "VPCZoneIdentifier": [
        {% for subnet in public_subnet -%}
          "{{ subnet }}"
          {% if not loop.last %},{% endif -%}
        {% endfor -%}
        ],
        "MaxSize": "{{ master_max_instance_count | default(3) }}",
        "DesiredCapacity": "{{ master_instance_count | default(3) }}",
        "LaunchConfigurationName": {
          "Ref": "MasterLaunchConfig"
        },
        "MinSize": "{{ master_instance_count | default(3) }}"
      }
    },
    "MasterScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "MasterServerGroup" },
        "Cooldown" : "{{ master_cooldown }}",
        "ScalingAdjustment" : "{{ master_scaling_adjustment }}"
      }
    },
    "MasterCPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "EvaluationPeriods": "{{ master_evaluation_period }}",
        "Statistic": "{{ master_statistic_type }}",
        "Threshold": "{{ master_threshold }}",
        "AlarmDescription": "{{ master_alarm_description }}",
        "Period": "{{ master_period }}",
        "AlarmActions": [ { "Ref": "MasterScaleUpPolicy" } ],
        "Namespace": "AWS/EC2",
        "Dimensions": [ {
           "Name": "AutoScalingGroupName",
           "Value": { "Ref": "MasterServerGroup" }
        } ],
        "ComparisonOperator": "{{ master_comparison_operator }}",
        "MetricName": "{{ master_metric_name }}"
      }
    },
    "PublicSlaveToSlaveIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "SourceSecurityGroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "GroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "ToPort": "65535",
        "IpProtocol": "-1",
        "FromPort": "0"
      }
    },
    "MasterToSlaveIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "SourceSecurityGroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "GroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "ToPort": "65535",
        "IpProtocol": "-1",
        "FromPort": "0"
      }
    },
    "MasterRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "{{ environ }}-DCOS-Masters",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "ExhibitorS3Bucket"
                          },
                          "/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "ExhibitorS3Bucket"
                          }
                        ]
                      ]
                    }
                  ],
                  "Action": [
                    "s3:AbortMultipartUpload",
                    "s3:DeleteObject",
                    "s3:GetBucketAcl",
                    "s3:GetBucketPolicy",
                    "s3:GetObject",
                    "s3:GetObjectAcl",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:ListMultipartUploadParts",
                    "s3:PutObject",
                    "s3:PutObjectAcl"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Ref": "AWS::StackId"
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Ref": "AWS::StackId"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ],
                  "Action": [
                    "cloudformation:*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": "*",
                  "Action": [
                    "ec2:DescribeKeyPairs",
                    "ec2:DescribeSubnets",
                    "ec2:CreateNetworkInterface",
                    "ec2:DeleteNetworkInterface",
                    "ec2:Describe*",
                    "ec2:ModifyNetworkInterfaceAttribute",
                    "autoscaling:DescribeLaunchConfigurations",
                    "autoscaling:UpdateAutoScalingGroup",
                    "autoscaling:DescribeAutoScalingGroups",
                    "autoscaling:DescribeScalingActivities",
                    "elasticloadbalancing:DescribeLoadBalancers",
                    "ecr:GetAuthorizationToken",
                    "elasticfilesystem:*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:ecr:{{ region }}:{{ aws_account_number }}:repository/awscli",
                    "arn:aws:ecr:{{ region }}:{{ aws_account_number }}:repository/dcos-cli",
                    "arn:aws:ecr:{{ region }}:{{ aws_account_number }}:repository/{% if custom_ecr_repo is defined %}{{ custom_ecr_repo }}{% else %}jenkins{% endif %}"
                  ],
                  "Action": [
                    "ecr:GetRepositoryPolicy",
                    "ecr:DescribeRepositories",
                    "ecr:ListImages",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:PutImage",
                    "ecr:InitiateLayerUpload",
                    "ecr:UploadLayerPart",
                    "ecr:CompleteLayerUpload"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "PublicSlaveIngressOne": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "ToPort": "21",
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0",
        "FromPort": "0"
      }
    },
    "SlaveSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Mesos Slaves",
        "VpcId": "{{ vpc_id }}",
        "Tags": [
          { "Key": "mGage:env",  "Value": "{{ environ }}" },
          { "Key": "mGage:unit",  "Value": "techops"  },
          { "Key": "mGage:product",  "Value": "Mesosphere"  },
          { "Key": "mGage:subproduct",  "Value": "DCOS"  },
          { "Key": "Name", "Value": "{{ environ }}-dcos-SlaveSecurityGroup" }
        ]
      }
    },
    "ExhibitorS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy" : "Delete"
    },
    "MasterToPublicSlaveIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "SourceSecurityGroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "ToPort": "65535",
        "IpProtocol": "-1",
        "FromPort": "0"
      }
    },
    "MasterToMasterIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "SourceSecurityGroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "ToPort": "65535",
        "IpProtocol": "-1",
        "FromPort": "0"
      }
    },
    "SlaveToMasterIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "ToPort": "65535",
        "IpProtocol": "-1",
        "FromPort": "0"
      }
    }
  },
  "Outputs": {
    "DnsAddress": {
      "Description": "Mesos Master",
      "Value": {
        "Fn::GetAtt": [
          "InternalMasterLoadBalancer",
          "DNSName"
        ]
      }
    },
    "PublicSlaveDnsAddress": {
      "Description": "Public slaves",
      "Value": {
        "Fn::GetAtt": [
          "PublicSlaveLoadBalancer",
          "DNSName"
        ]
      }
    },
    "MasterASG": {
      "Description" : "AutoScalingGroup for the Master Node Cluster",
      "Value": { "Ref" : "MasterServerGroup" }
    }
  }
}
